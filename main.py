import os
import discord
import requests
import asyncio
import feedparser
import time
from discord import app_commands
from discord.ext import commands
from server import server_on

LAST_VIDEO_ID_FILE = 'last_video_id.txt'

# Discord Bot Token
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')

# Twitch API Credentials
CLIENT_ID = os.getenv('CLIENT_ID')
CLIENT_SECRET = os.getenv('CLIENT_SECRET')
TWITCH_USERNAME = 'Uranutsu'

# YouTube API Key
YOUTUBE_API_KEY = os.getenv('YOUTUBE_API_KEY')
YOUTUBE_CHANNEL_ID = os.getenv('YOUTUBE_CHANNEL_ID')

# URLs for Twitch API
OAUTH_URL = 'https://id.twitch.tv/oauth2/token'
USER_INFO_URL = 'https://api.twitch.tv/helix/users'
STREAMS_URL = 'https://api.twitch.tv/helix/streams'

# Intents for Discord bot
intents = discord.Intents.default()
intents.message_content = True
intents.members = True  

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discord
client = discord.Client(intents=intents)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á tree ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Slash Commands
tree = app_commands.CommandTree(client)
client = commands.Bot(command_prefix='!', intents=intents)

###################################################################################################################################

def read_last_video_id():
    if os.path.exists(LAST_VIDEO_ID_FILE):
        with open(LAST_VIDEO_ID_FILE, 'r') as f:
            return f.read().strip()
    return None

def write_last_video_id(video_id):
    with open(LAST_VIDEO_ID_FILE, 'w') as f:
        f.write(video_id)

# Cache for the last video
last_video_id = read_last_video_id()  
channel_id = os.getenv('channel_id')
discord_channel_id = 1267797519480393829

async def check_youtube(channel_id, discord_channel):
    global last_video_id
    feed_url = f"https://www.youtube.com/feeds/videos.xml?channel_id={channel_id}"
    feed = feedparser.parse(feed_url)
    
    # Check if there is a new video
    if feed.entries:
        latest_video = feed.entries[0]
        video_id = latest_video['id']
        
        if video_id != last_video_id:  # If it's a new video
            last_video_id = video_id
            video_title = latest_video['title']
            video_url = latest_video['link']
            
            # Send the notification to Discord
            await discord_channel.send(f"Uranutsu Ch. ‡∏≠‡∏±‡∏û‡∏Ñ‡∏•‡∏¥‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏°‡∏≤‡∏î‡∏π‡∏Å‡∏±‡∏ô‡πÄ‡∏£‡πä‡∏ß‡∏ß‡∏ß‡∏ß‡∏ß‡∏ß‡∏ß‡∏ß @everyone\n{video_url}")
            write_last_video_id(video_id)  # Write the new video ID to the file

# Scheduler function to run the check periodically
async def youtube_notifier(client, channel_id, discord_channel_id):
    await client.wait_until_ready()
    discord_channel = client.get_channel(discord_channel_id)
    
    while not client.is_closed():
        await check_youtube(channel_id, discord_channel)
        await asyncio.sleep(900)  # Wait 15 minutes before checking again
###################################################################################################################################

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á
message_sent = None

@client.event
async def on_message(message):
    global message_sent  # ‡πÉ‡∏ä‡πâ global ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ

    if message.author == client.user:
        return

    if message.content.startswith('!rule'):
        rules = (
            "‚ú®   ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô    üëë:\n\n"
            "‚öù ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ã‡∏∂‡πà‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô\n\n"
            "‚öù ‡πÑ‡∏°‡πà‡∏ã‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏™‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏û‡∏≠‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°\n\n"
            "‚öù ‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏ô‡∏±‡∏™‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏≠‡∏î‡πÄ‡∏ü‡∏£‡∏ô‡∏ô‡∏±‡∏™‡∏°‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ó‡πá‡∏Å‡∏ô‡∏±‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡πÑ‡∏î‡πâ\n\n"
            "‚öù ‡πÑ‡∏°‡πà‡∏û‡∏≤‡∏î‡∏û‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏î‡∏™‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢\n\n"
            "‚öù ‡∏´‡πâ‡∏≤‡∏°‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏≤‡∏°‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô\n\n"
            "‚öù ‡∏´‡πâ‡∏≤‡∏°‡∏™‡πÅ‡∏õ‡∏°‡πÅ‡∏ä‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡πÜ ‡∏£‡∏±‡∏ß‡πÜ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≥‡∏Ñ‡∏≤‡∏ç‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πà‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô\n\n"
            "‚öù ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ù‡∏≤‡∏Å‡∏Ñ‡∏•‡∏¥‡∏õ / ‡∏ù‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á <#1279197214069231656> ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡πâ‡∏≠‡∏á\n\n"
            "‚öù ‡∏ã‡∏±‡∏û‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ó‡πá‡∏Å‡∏ä‡∏ß‡∏ô‡∏ô‡∏±‡∏™‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á <#1267799728846802985> ‡∏ñ‡πâ‡∏≤‡∏ô‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô\n\n"
            "‚öù ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ó‡∏ä‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏ß‡πà‡∏≤‡∏ô‡∏±‡∏™‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß\n\n"
            "‚úø ‡∏´‡∏≤‡∏Å‡∏ó‡∏≥‡∏ú‡∏¥‡∏î‡∏Å‡∏é 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡πÑ‡∏õ‡∏ï‡∏±‡∏Å‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 3 ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡∏≠‡∏≠‡∏Å‡∏î‡∏¥‡∏™‡∏ñ‡∏≤‡∏ß‡∏£‡∏Ñ‡πà‡∏∞  @everyone ‚úø"
        )

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if message_sent is None:
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á
            message_sent = await message.channel.send(rules)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° Reaction "‚úÖ" ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á
            await message_sent.add_reaction("‚úÖ")
        else:
            await message.channel.send("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏é‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!")  # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥

    elif message.content.startswith('!live'):
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô live_status_task() ‡πÅ‡∏•‡∏∞ youtube_live_status_task() ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        asyncio.create_task(live_status_task())  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô live_status_task() ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
        asyncio.create_task(youtube_live_status_task())  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô youtube_live_status_task() ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    
    elif message.content.startswith('!clip'):
        discord_channel = client.get_channel(1267797519480393829)  # Channel ID for Discord notifications
        if discord_channel is None:
            await message.channel.send("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
            return
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô get_latest_clip() ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
        asyncio.create_task(get_latest_clip(channel_id, discord_channel))

###################################################################################################################################

# # Get Twitch OAuth Token
# def get_twitch_token():
#     params = {
#         'client_id': CLIENT_ID,
#         'client_secret': CLIENT_SECRET,
#         'grant_type': 'client_credentials'
#     }
#     response = requests.post(OAUTH_URL, params=params)
#     return response.json().get('access_token')

# # Get Twitch user ID by username
# def get_user_id(twitch_username, token):
#     headers = {
#         'Client-ID': CLIENT_ID,
#         'Authorization': f'Bearer {token}'
#     }
#     params = {'login': twitch_username}
#     response = requests.get(USER_INFO_URL, headers=headers, params=params)
#     data = response.json().get('data')
#     if data:
#         return data[0]['id'], data[0]['profile_image_url']  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ID ‡πÅ‡∏•‡∏∞ URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
#     return None, None  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

##################################################################################################################################
# Function to get the latest clip from YouTube
async def get_latest_clip(channel_id, discord_channel):
    feed_url = f"https://www.youtube.com/feeds/videos.xml?channel_id={channel_id}"
    feed = feedparser.parse(feed_url)

    if feed.entries:
        latest_video = feed.entries[0]
        video_title = latest_video['title']
        video_url = latest_video['link']
        thumbnail_url = latest_video.get('media_thumbnail', [{'url': ''}])[0]['url']  # ‡∏î‡∏∂‡∏á thumbnail

        # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Discord
        await discord_channel.send(f'Uranutsu Ch. ‡∏≠‡∏±‡∏û‡∏Ñ‡∏•‡∏¥‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏°‡∏≤‡∏î‡∏π‡∏Å‡∏±‡∏ô‡πÄ‡∏£‡πä‡∏ß‡∏ß‡∏ß‡∏ß‡∏ß‡∏ß‡∏ß‡∏ß @everyone\n{video_url}')

# Check if the user is live
# def check_live_status(user_id, token):
#     headers = {
#         'Client-ID': CLIENT_ID,
#         'Authorization': f'Bearer {token}'
#     }
#     params = {'user_id': user_id}
#     response = requests.get(STREAMS_URL, headers=headers, params=params)
#     streams = response.json().get('data')
#     if streams:
#         return streams[0]  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
#     return None  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ï‡∏£‡∏µ‡∏°

# # Task to check Twitch live status periodically
# async def live_status_task():
#     await client.wait_until_ready()
#     channel = client.get_channel(1267797428849868811)  # ‡πÉ‡∏™‡πà ID ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á Discord ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
#     token = get_twitch_token()
#     user_id, icon_url = get_user_id(TWITCH_USERNAME, token)

#     global is_live 

#     while not client.is_closed():
#         stream = check_live_status(user_id, token)
#         if stream and not is_live:
#             # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏•‡∏ü‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏•‡∏ü‡πå
#             title = stream['title']  # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏•‡∏ü‡πå
#             game_name = stream['game_name']  # ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°
#             viewer_count = stream['viewer_count']  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏î‡∏π
#             thumbnail_url = stream['thumbnail_url']  # URL ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏°‡πÅ‡∏°‡∏•

#             timestamp = int(time.time())
#             thumbnail_url = f"{thumbnail_url.replace('{width}x{height}', '1280x720')}?t={timestamp}"

#             embed = discord.Embed(
#                 description=f'**[{title}](https://twitch.tv/{TWITCH_USERNAME})**',
#                 color=0x9146FF  # ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á
#             )

#             # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢
#             embed.set_author(
#                 name=f'{TWITCH_USERNAME} is live on Twitch!',
#                 url=f'https://twitch.tv/{TWITCH_USERNAME}',
#                 icon_url=icon_url  # ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á ‡πÜ ‡∏ä‡∏∑‡πà‡∏≠
#             )

#             # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
#             embed.add_field(name='Game', value=game_name, inline=True)  # ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°
#             embed.add_field(name='Viewers', value=viewer_count, inline=True)  # ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏î‡∏π

#             # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏°‡πÅ‡∏°‡∏•‡πÉ‡∏ô Embed
#             embed.set_image(url=thumbnail_url)  # ‡πÉ‡∏ä‡πâ set_image ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏ç‡πà

#             # ‡∏™‡πà‡∏á Embed ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á
#             await channel.send(f'‚ù• Uranutsu ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ @everyone  ï ·µí ·¥• ·µí î', embed=embed)
#             is_live = True  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏•‡∏ü‡πå
#         elif not stream and is_live:
#             # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏•‡∏ü‡πå‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏•‡∏ü‡πå
#             is_live = False  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏•‡∏ü‡πå

#         await asyncio.sleep(900)  # ‡∏£‡∏≠ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

# Get Twitch OAuth Token
def get_twitch_token():
    params = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'grant_type': 'client_credentials'
    }
    response = requests.post(OAUTH_URL, params=params)
    return response.json().get('access_token')

# Get Twitch user ID by username
def get_user_id(twitch_username, token):
    headers = {
        'Client-ID': CLIENT_ID,
        'Authorization': f'Bearer {token}'
    }
    params = {'login': twitch_username}
    response = requests.get(USER_INFO_URL, headers=headers, params=params)
    data = response.json().get('data')
    if data:
        return data[0]['id'], data[0]['profile_image_url']  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ID ‡πÅ‡∏•‡∏∞ URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
    return None, None  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

# Check if the user is live
def check_live_status(user_id, token):
    headers = {
        'Client-ID': CLIENT_ID,
        'Authorization': f'Bearer {token}'
    }
    params = {'user_id': user_id}
    response = requests.get(STREAMS_URL, headers=headers, params=params)
    streams = response.json().get('data')
    if streams:
        return streams[0]  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    return None  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ï‡∏£‡∏µ‡∏°

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏°‡πÄ‡∏ô‡∏•
def generate_thumbnail_url(base_url):
    timestamp = int(time.time())  # ‡∏£‡∏±‡∏ö timestamp ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    return f"{base_url.replace('{width}x{height}', '1280x720')}?t={timestamp}"

# Task to check Twitch live status periodically
async def live_status_task():
    await client.wait_until_ready()
    channel = client.get_channel(1267797428849868811)  # ‡πÉ‡∏™‡πà ID ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á Discord ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    token = get_twitch_token()
    user_id, icon_url = get_user_id(TWITCH_USERNAME, token)

    global is_live 

    while not client.is_closed():
        stream = check_live_status(user_id, token)
        if stream and not is_live:
            # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏•‡∏ü‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏•‡∏ü‡πå
            title = stream['title']  # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏•‡∏ü‡πå
            game_name = stream['game_name']  # ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°
            viewer_count = stream['viewer_count']  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏î‡∏π
            thumbnail_url = stream['thumbnail_url']  # URL ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏°‡πÅ‡∏°‡∏•

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏°‡πÄ‡∏ô‡∏•
            thumbnail_url = generate_thumbnail_url(thumbnail_url)

            embed = discord.Embed(
                description=f'**[{title}](https://twitch.tv/{TWITCH_USERNAME})**',
                color=0x9146FF  # ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á
            )

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢
            embed.set_author(
                name=f'{TWITCH_USERNAME} is live on Twitch!',
                url=f'https://twitch.tv/{TWITCH_USERNAME}',
                icon_url=icon_url  # ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á ‡πÜ ‡∏ä‡∏∑‡πà‡∏≠
            )

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            embed.add_field(name='Game', value=game_name, inline=True)  # ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°
            embed.add_field(name='Viewers', value=viewer_count, inline=True)  # ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏î‡∏π

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏°‡πÅ‡∏°‡∏•‡πÉ‡∏ô Embed
            embed.set_image(url=thumbnail_url)  # ‡πÉ‡∏ä‡πâ set_image ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏ç‡πà

            # ‡∏™‡πà‡∏á Embed ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á
            await channel.send(f'‚ù• Uranutsu ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ @everyone  ï ·µí ·¥• ·µí î', embed=embed)
            is_live = True  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏•‡∏ü‡πå
        elif not stream and is_live:
            # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏•‡∏ü‡πå‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏•‡∏ü‡πå
            is_live = False  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏•‡∏ü‡πå

        await asyncio.sleep(900)  # ‡∏£‡∏≠ 15 ‡∏ô‡∏≤‡∏ó‡∏µ (900 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)


###################################################################################################################################

# Function to check if the YouTube channel is live and get video details
def get_youtube_live_video(channel_id):
    url = f'https://www.googleapis.com/youtube/v3/search?part=snippet&channelId={channel_id}&eventType=live&type=video&key={YOUTUBE_API_KEY}'
    response = requests.get(url)
    data = response.json()

    if 'items' in data and len(data['items']) > 0:
        video_id = data['items'][0]['id']['videoId']
        title = data['items'][0]['snippet']['title']
        thumbnail_url = data['items'][0]['snippet']['thumbnails']['high']['url']

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        video_details_url = f'https://www.googleapis.com/youtube/v3/videos?id={video_id}&part=liveStreamingDetails,snippet&key={YOUTUBE_API_KEY}'
        video_details_response = requests.get(video_details_url)
        video_details = video_details_response.json()

        # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß
        if 'items' in video_details and len(video_details['items']) > 0:
            live_details = video_details['items'][0].get('liveStreamingDetails', {})
            game_name = live_details.get('gameTitle', '-')  # ‡πÉ‡∏ä‡πâ "-" ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°
            viewer_count = live_details.get('concurrentViewers', '0')  # ‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß
        else:
            game_name = '-'
            viewer_count = '0'

        return video_id, title, thumbnail_url, game_name, viewer_count
    
    return None, None, None, None, None  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•


# Function to get YouTube channel details (profile image, channel name)
def get_youtube_channel_details(channel_id):
    url = f'https://www.googleapis.com/youtube/v3/channels?part=snippet&id={channel_id}&key={YOUTUBE_API_KEY}'
    response = requests.get(url)
    data = response.json()

    if 'items' in data and len(data['items']) > 0:
        channel_name = data['items'][0]['snippet']['title']
        profile_image_url = data['items'][0]['snippet']['thumbnails']['high']['url']
        return channel_name, profile_image_url

    return None, None  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

# Task to check live status periodically for YouTube
async def youtube_live_status_task():
    await client.wait_until_ready()
    channel = client.get_channel(1267797519480393829)  # ‡πÉ‡∏™‡πà ID ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á Discord ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

    is_live = False  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ‡πÑ‡∏°‡πà‡πÑ‡∏•‡∏ü‡πå

    while not client.is_closed():
        video_id, title, thumbnail_url, game_name, viewer_count = get_youtube_live_video(YOUTUBE_CHANNEL_ID)
        channel_name, profile_image_url = get_youtube_channel_details(YOUTUBE_CHANNEL_ID)

        if video_id and not is_live:
            # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏•‡∏ü‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏•‡∏ü‡πå
            embed = discord.Embed(description=f'**[{title}](https://www.youtube.com/watch?v={video_id})**', color=0xFF0000)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢
            embed.set_author(name=f'{channel_name} is live on YouTube!', url=f'https://www.youtube.com/channel/{YOUTUBE_CHANNEL_ID}', icon_url=profile_image_url)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß
            embed.add_field(name="Game", value=game_name, inline=True)
            embed.add_field(name="Viewers", value=viewer_count, inline=True)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û thumbnail
            embed.set_image(url=thumbnail_url)

            # ‡∏™‡πà‡∏á Embed ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á
            await channel.send(f'‚ù• Uranutsu ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ @everyone  ï ·µí ·¥• ·µí î', embed=embed)
            is_live = True  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏•‡∏ü‡πå
        elif not video_id and is_live:
            is_live = False  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏•‡∏ü‡πå
            print(f'{channel_name} is not live.')

        await asyncio.sleep(900)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÜ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

###################################################################################################################################


# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
@client.event
async def on_ready():
    print(f'Logged in as {client.user}')
    await client.tree.sync()
    # client.loop.create_task(live_status_task())  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Twitch
    # check new clip
    # discord_channel = client.get_channel(discord_channel_id)
    # await check_youtube(channel_id, discord_channel)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    # client.loop.create_task(youtube_notifier(client, channel_id, discord_channel_id)) # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡∏Ñ‡∏•‡∏¥‡∏õ‡∏•‡∏á youtube
    # client.loop.create_task(youtube_live_status_task())  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ YouTube


###################################################################################################################################
# ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏¥‡∏™
@client.event
async def on_member_join(member):
    channel = discord.utils.get(member.guild.text_channels, name='üéä-‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    if channel:
        embed = discord.Embed(
            title="‚ù• ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á‡∏¢‡∏π‡πÄ‡∏£‡∏ô‡∏±‡∏™‡∏™‡∏∂‡∏ô‡∏∞‡∏Ñ‡∏∞ ‚òÖ\n"
            "‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢ ‚Ä¢ ‚Ä¢",
            color=0xffc0cb  # ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π‡∏≠‡πà‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ö‡∏Ç‡πâ‡∏≤‡∏á ‡πÜ
        )
        embed.add_field(
            name="",
            value=f"ùêªùëúùìÅùìÅùí∂„ÉÉ {member.mention}  ï Àµ‚Ä¢ ‚Çí ‚Ä¢Àµ  î\n"
                  "‚ú©‚ú© ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏é‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà : <#1267797773034721443>\n"
                  "‡∏Å‡∏î‡∏ã‡∏±‡∏û‡∏ä‡πà‡∏≠‡∏áTwitch‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô69‡∏ö‡∏≤‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏ô‡πÑ‡∏•‡∏ü‡πå‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡∏±‡∏û\n"
                  "**‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°Discord‡∏Å‡∏±‡∏öTwitch‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏¢‡∏®‡∏ã‡∏±‡∏û‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ô‡∏∞‡∏Ñ‡∏∞**\n"
                  "‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡πâ‡∏™‡∏ô‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏£‡∏≤‡∏ô‡∏∞‡∏à‡πä‡∏∞ ‚ôõ\n"
                  "‚Ä¢‚Äî‚Äî‚Äî‚Äî‚Äî----------‚Äî‚Ä¢¬∞‚Ä¢‚úø‚Ä¢¬∞‚Ä¢‚Äî‚Äî-----------‚Äî‚Äî‚Äî‚Äî‚Ä¢",
            inline=False
        )
        

        # ‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ GIF ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏ß‡∏≤
        embed.set_thumbnail(url="https://media1.tenor.com/m/obO4Phs6lLMAAAAC/6555.gif")  # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ URL ‡∏Ç‡∏≠‡∏á GIF ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏ß‡∏≤

        # ‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ GIF ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        embed.set_image(url="https://media.tenor.com/Psq0TSQb_b0AAAAi/welcome-anime.gif")  # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ URL ‡∏Ç‡∏≠‡∏á GIF ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á

        # ‡∏™‡πà‡∏á Embed ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á
        await channel.send(embed=embed)

###################################################################################################################################
server_on()

client.run(DISCORD_TOKEN)  # ‡∏£‡∏±‡∏ô Discord bot
